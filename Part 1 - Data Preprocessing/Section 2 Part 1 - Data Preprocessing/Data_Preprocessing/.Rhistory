print("Hello World")
print("Hello World")
print("Hello World")
getwd()
x=10
print(x)
x=10
print(x)
x1 = c(1,2)
x1
load("~/Documents/Rcode/facebook.RData")
View(fb_page)
5
"Hello"
5+5
x=c(1,2,3,4)
x
x=numericVectors rep(1,100)
x
numericVector<-rep(1,100)
x=numericVector<-rep(1,100)
x
numericVector1<-rep(1,10)
numericVector2<-rep(1,10)
numericVector1+numericVector2
numericVector1<-rep(1,2,3)
numericVector2<-rep(2,4,6)
numericVector1+numericVector2
numericVector1<-c(1,2,3)
numericVector2<-c(2,4,6)
numericVector1+numericVector2
numericVector1<-c(1,2,3,4)
numericVector2<-c(2,4,6)
numericVector1<-c(1,2,3,4)
numericVector2<-c(2,4,6)
numericVector1+numericVector2
numericVector1<-c(1,2,3,4,1)
numericVector2<-c(2,4,6)
numericVector1+numericVector2
numericVector1<-c(1,2,3,4,1,3)
numericVector2<-c(2,4,6)
numericVector1<-c(1,2,3,4,1,3)
numericVector2<-c(2,4,6)
numericVector1+numericVector2
y=seq(1,100)
y
x=seq(1,100)
x
m=0.5
m*x
y=seq(1,100)
x=seq(1,100)
m=0.5
c=2
m*x + c
stringvector = c("Hello", "World")
stringvector
logicalvector = c(TRUE, FALSE)
logicalvector
logicalvector = c(TRUE, FALSE)
logicalvector
stringvector[1]
sum(numericVector1)
sum(x)
logicalvector = c(TRUE, FALSE, TRUE, TRUE)
sum(logicalvector)
y=matrix(x,2,5,byrow = TRUE)
y
rbind(y,c(1,2,3,4,5))
cbind(y,c(2,3,4))
cbind(y,c(1))
y_dataframe=date.frame(y)
y_dataframe
y=matrix(x,2,5,byrow = TRUE)
y
rbind(y,c(1,2,3,4,5))
cbind(y,c(1))
y_dataframe=date.frame(y)
y_dataframe
y=matrix(x,2,5,byrow = TRUE)
y
rbind(y,c(1,2,3,4,5))
cbind(y,c(1))
y_dataframe=data.frame(y)
y_dataframe
library(readr)
test <- read_csv("~/Documents/Rcode/test.csv")
View(test)
xx=read_csv("test.csv")
xx
mySum<-function(x,y)
{
return x+y
}
mySum(3,4)
mySum<-function(x,y)
{
return (x+y)
}
mySum(3,4)
for(i in c(seq(1,100), rep(2000,10)))
{
print(i)
}
-----------------------------------
gender <- NULL ## Initialize a variable
gender <- c(“M”,”F”,”F”,”F”,”M”)
------------------------------------
# Structure of the character vector gender
> str(gender)
chr [1:5] "M" "F" "F" "F" "M„
gender <- NULL ## Initialize a variable
gender <- c(“M”,”F”,”F”,”F”,”M”)
gender <- NULL ## Initialize a variable
gender <- c('M','F','F','F','M')
str(gender)
unique(gender)
set.seed(100) #So that we get the same random sample each time we run the sampler.
data1 <-c(sample(1:30,60,replace=T),sample(30:70,20,replace=T),sample(70:100,20,replace=T))
data2 <- c(sample(1:30,20,replace=T),sample(30:70,20,replace=T),sample(70:100,60,replace=T))
data3 <- c(sample(1:45,20,replace=T),sample(45:55,60,replace=T),sample(55:100,20,replace=T))
install.packages("e1071") # For Calculating Skewness and Kurtosis
library(e1071)
install.packages("e1071")
set.seed(100)
data1 <-c(sample(1:30,60,replace=T),sample(30:70,20,replace=T),sample(70:100,20,replace=T))
data2 <- c(sample(1:30,20,replace=T),sample(30:70,20,replace=T),sample(70:100,60,replace=T))
data3 <- c(sample(1:45,20,replace=T),sample(45:55,60,replace=T),sample(55:100,20,replace=T))
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
install.packages("e1071", dep = TRUE)
install.packages("~/Downloads/e1071_1.6-8.tgz", repos = NULL, type = .Platform$pkgType)
library(e1071)
skewness(data1);skewness(data2);skewness(data3); kurtosis(data1);kurtosis(data2);kurtosis(data3)
hist1 <- hist(data1,probability = T,plot = FALSE)
hist(data1,probability = T,xlim = c(0,100),ylim = c(0,max(hist1$density)),main = "Histogram for Data1",xlab = "Participation",ylab = "Proportion")
par(new = TRUE) #  To plot one graph over another
plot(density(data1),xlim = c(0,100),ylim = c(0,max(hist1$density)),xlab = NA,ylab = NA,main = NA,lty= 2)
# Locating mean and median in this plot.
abline(v = mean(data1), col = "green")
abline(v = median(data1), col = "red")
legend("topright",c("Mean","Median"),col = c("green","red"),lty = c(1,1))
ChickWeight
str(ChickWeight)
head(ChickWeight)
DT <- ChickWeight.table(mydf)
DT[, sum(Chick), by = Diet]
d1 <- density(dat1[dat1$TIme=10 & dat1$Diet == 1, "Weight"])
d1 <- density(dat1[dat1$Time == 10 & dat1$Diet == 1, "Weight"])
dat1<-ChickWeight
d1 <- density(dat1[dat1$Time == 10 & dat1$Diet == 1, "Weight"])
d1 <- density(dat1[dat1$Time == 10 & dat1$Diet==1, "weight"])
dat1<-ChickWeight
d1 <- density(dat1[dat1$Time == 10 & dat1$Diet==1, "weight"])
d2 <- density(dat1[dat1$Time == 10 & dat1$Diet==2, "weight"])
d3 <- density(dat1[dat1$Time == 10 & dat1$Diet==3, "weight"])
d3 <- density(dat1[dat1$Time == 10 & dat1$Diet==4, "weight"])
ylm <- c(0,max(d1$y,d2$y,d3$y,d4$y))
xlm <- c(min(d1$x,d2$x,d3$x,d4$x),max(d1$x,d2$x,d3$x,d4$x))
xlb = "Weight"
ylb = "Proportion"
dat1<-ChickWeight
d1 <- density(dat1[dat1$Time == 10 & dat1$Diet==1, "weight"])
d2 <- density(dat1[dat1$Time == 10 & dat1$Diet==2, "weight"])
d3 <- density(dat1[dat1$Time == 10 & dat1$Diet==3, "weight"])
d4 <- density(dat1[dat1$Time == 10 & dat1$Diet==4, "weight"])
ylm <- c(0,max(d1$y,d2$y,d3$y,d4$y))
xlm <- c(min(d1$x,d2$x,d3$x,d4$x),max(d1$x,d2$x,d3$x,d4$x))
xlb = "Weight"
ylb = "Proportion"
ylm <- c(0,max(d1$y,d2$y,d3$y,d4$y))
xlm <- c(min(d1$x,d2$x,d3$x,d4$x),max(d1$x,d2$x,d3$x,d4$x))
xlb = "Weight"
ylb = "Proportion"
plot((d1),col = "red",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d2),col = "blue",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d3),col = "green",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d4),col = "orange",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
legend("topleft",c("Diet1","Diet2","Diet3","Diet4"),lty = c(1,1,1,1),col = c("red","blue","green","orange"))
dat1<-ChickWeight
d1 <- density(dat1[dat1$Time == 20 & dat1$Diet==1, "weight"])
d2 <- density(dat1[dat1$Time == 20 & dat1$Diet==2, "weight"])
d3 <- density(dat1[dat1$Time == 20 & dat1$Diet==3, "weight"])
d4 <- density(dat1[dat1$Time == 20 & dat1$Diet==4, "weight"])
ylm <- c(0,max(d1$y,d2$y,d3$y,d4$y))
xlm <- c(min(d1$x,d2$x,d3$x,d4$x),max(d1$x,d2$x,d3$x,d4$x))
xlb = "Weight"
ylb = "Proportion"
plot((d1),col = "red",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d2),col = "blue",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d3),col = "green",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d4),col = "orange",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
legend("topleft",c("Diet1","Diet2","Diet3","Diet4"),lty = c(1,1,1,1),col = c("red","blue","green","orange"))
dat1<-ChickWeight
d1 <- density(dat1[dat1$Time == 100 & dat1$Diet==1, "weight"])
d2 <- density(dat1[dat1$Time == 100 & dat1$Diet==2, "weight"])
d3 <- density(dat1[dat1$Time == 100 & dat1$Diet==3, "weight"])
d4 <- density(dat1[dat1$Time == 100 & dat1$Diet==4, "weight"])
ylm <- c(0,max(d1$y,d2$y,d3$y,d4$y))
xlm <- c(min(d1$x,d2$x,d3$x,d4$x),max(d1$x,d2$x,d3$x,d4$x))
xlb = "Weight"
ylb = "Proportion"
plot((d1),col = "red",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d2),col = "blue",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d3),col = "green",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d4),col = "orange",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
legend("topleft",c("Diet1","Diet2","Diet3","Diet4"),lty = c(1,1,1,1),col = c("red","blue","green","orange"))
dat1<-ChickWeight
d1 <- density(dat1[dat1$Time == 100 & dat1$Diet==1, "weight"])
d2 <- density(dat1[dat1$Time == 100 & dat1$Diet==2, "weight"])
d3 <- density(dat1[dat1$Time == 100 & dat1$Diet==3, "weight"])
d4 <- density(dat1[dat1$Time == 100 & dat1$Diet==4, "weight"])
ylm <- c(0,max(d1$y,d2$y,d3$y,d4$y))
xlm <- c(min(d1$x,d2$x,d3$x,d4$x),max(d1$x,d2$x,d3$x,d4$x))
xlb = "Weight"
ylb = "Proportion"
plot((d1),col = "red",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d2),col = "blue",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d3),col = "green",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d4),col = "orange",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
legend("topleft",c("Diet1","Diet2","Diet3","Diet4"),lty = c(1,1,1,1),col = c("red","blue","green","orange"))
dat1<-ChickWeight
d1 <- density(dat1[dat1$Time == 30 & dat1$Diet==1, "weight"])
d2 <- density(dat1[dat1$Time == 30 & dat1$Diet==2, "weight"])
d3 <- density(dat1[dat1$Time == 30 & dat1$Diet==3, "weight"])
d4 <- density(dat1[dat1$Time == 30 & dat1$Diet==4, "weight"])
ylm <- c(0,max(d1$y,d2$y,d3$y,d4$y))
xlm <- c(min(d1$x,d2$x,d3$x,d4$x),max(d1$x,d2$x,d3$x,d4$x))
xlb = "Weight"
ylb = "Proportion"
plot((d1),col = "red",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d2),col = "blue",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d3),col = "green",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d4),col = "orange",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
legend("topleft",c("Diet1","Diet2","Diet3","Diet4"),lty = c(1,1,1,1),col = c("red","blue","green","orange"))
dat1<-ChickWeight
d1 <- density(dat1[dat1$Time == 30 & dat1$Diet==1, "weight"])
d2 <- density(dat1[dat1$Time == 30 & dat1$Diet==2, "weight"])
d3 <- density(dat1[dat1$Time == 30 & dat1$Diet==3, "weight"])
d4 <- density(dat1[dat1$Time == 30 & dat1$Diet==4, "weight"])
ylm <- c(0,max(d1$y,d2$y,d3$y,d4$y))
xlm <- c(min(d1$x,d2$x,d3$x,d4$x),max(d1$x,d2$x,d3$x,d4$x))
xlb = "Weight"
ylb = "Proportion"
plot((d1),col = "red",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d2),col = "blue",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d3),col = "green",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d4),col = "orange",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
legend("topleft",c("Diet1","Diet2","Diet3","Diet4"),lty = c(1,1,1,1),col = c("red","blue","green","orange"))
dat1<-ChickWeight
d1 <- density(dat1[dat1$Time == 10 & dat1$Diet==1, "weight"])
d2 <- density(dat1[dat1$Time == 10 & dat1$Diet==2, "weight"])
d3 <- density(dat1[dat1$Time == 10 & dat1$Diet==3, "weight"])
d4 <- density(dat1[dat1$Time == 10 & dat1$Diet==4, "weight"])
ylm <- c(0,max(d1$y,d2$y,d3$y,d4$y))
xlm <- c(min(d1$x,d2$x,d3$x,d4$x),max(d1$x,d2$x,d3$x,d4$x))
xlb = "Weight"
ylb = "Proportion"
plot((d1),col = "red",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d2),col = "blue",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d3),col = "green",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
par(new = TRUE)
plot((d4),col = "orange",xlim = xlm,ylim = ylm,xlab = xlb,ylab=ylb,main = NA)
legend("topleft",c("Diet1","Diet2","Diet3","Diet4"),lty = c(1,1,1,1),col = c("red","blue","green","orange"))
sd1 <- sd(dat1)
mean1 <- mean(dat1)
sd1 <- sd(d1)
mean1 <- mean(d1)
library("devtools")
install.packages("devtools");
library("devtools");
install_github("Ram-N/weatherData");
library(weatherData);
checkDataAvailabilityForDateRange("SFO", "2010-10-29", "2013-01-12");
data(London2013);
getCurrentTemperature("PIT");
getStationCode("Buffalo", state="WY");
## Not run:
data_okay <- checkDataAvailabilityForDateRange("BOS",
"2011-01-01",
"2011-03-31")
## End(Not run)
data_okay <- checkSummarizedDataAvailability("GIG",
"2000-01-01",
"2005-12-31")
getCurrentTemperature(station ="HNL");
getCurrentTemperature(station ="TMP");
getCurrentTemperature(station ="TPA");
## Not run:
getDetailedWeather("NRT", "2014-04-29") #just the Temperature Columns
# Returns all columns available
getDetailedWeather("NRT", "2014-04-29", opt_all_columns=T)
wCDG <- getDetailedWeather("CDG", "2013-12-12",opt_custom_columns=T,
custom_columns=c(10,11,12))
## End(Not run)
getStationCode("Fiji");
getStationCode("Tampa");
getStationCode("Chicago");
## Not run:
paris_in_fall<- getSummarizedWeather("CDG", "2013-09-30") #will get Temp columns by default
#
windLHR <- getSummarizedWeather("LHR", "2012-12-12", "2012-12-31",
opt_custom_columns=TRUE,
custom_columns=c(17,18,19,23))
## End(Not run)
library(weatherData);
library(weatherData)
getWeatherForDate("SEA", "2014-05-05")
getWeatherForDate("SEA", "2014-05-05", opt_detailed=TRUE)
print("Hello World!")
setwd("~/Documents/GitHub/Machine Learning A to Z/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 Part 1 - Data Preprocessing/Data_Preprocessing")
dataset = read.csv('Data.csv')
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
))
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
View(dataset)
View(dataset)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)
)
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
labels = c(1, 0)
)
install.packages('caTools')
library(caTools)
set.seed(123)
split  = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set  = subset(dataset, split == TRUE)
test_set  = subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
